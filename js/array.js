/**
 * Массивы
 * 
 * Чтобы создать массив, нужно использовать литерал
 * массива ([ и ]) и внутри него перечислить элементы которые
 * хотите добавить через запятую
 */
var numbers = [10, 20, 30, 40];

/**
 * Получить доступ к определенному элементу массива можно 
 * через квадратные скобки указав индекс элемента.
 * 
 * Счет индексов начинается с 0
 * 
 * В данном примере, мы добавим в конец массива значение 50
 */
numbers[4] = 50;

/**
 * Метод массива .pop() добавляет один или больше элементов
 * на конец разделенные запятой
 * 
 * В данном примере в массив попадет два значения: 60 и 70
 */
numbers.push(60, 70);

/**
 * Метод массива .unshift() работает как .push() только
 * добавляет переданные элементы в начало массива
 * 
 * В начале появится два новых элемента 2 и 5
 */
numbers.unshift(2, 5);

/**
 * Методы .pop() и .shift() позволяют получить один элемент 
 * из начала или конца массива а также удаляют этот элемент
 * 
 * .pop() удаляет и возвращяет с конца
 * .shift() удаляет и возвращяет с начала
 */
console.log(numbers.pop());
console.log(numbers.shift());

/**
 * 
 */
console.log(numbers.slice(2));
// console.log(numbers.splice(2));

/**
 * Метод .join() "склеивает" элементы массива
 */
console.log(numbers.join(', '));

/**
 * Метод .concat() массива соеденяет переданные массив(ы)
 * с массивом на котором был вызван .concat() и возвращает результат
 * (не затрагивая оригинальный массив)
 */
console.log(numbers.concat([70, 80]));

for (var i = 0; i < numbers.length; i ++) {
    console.log(numbers[i], i);
}

numbers.forEach(function (value, index) {
    console.log(value, index);
});

numbers = numbers.map(function (value) {
    return value * value;
});

console.log(numbers.reduce(function (value, current) {
    return value + current;
}, 0));

/**
 * Выводим в консоль сам массив и его длину
 */
console.log(numbers, numbers.length);